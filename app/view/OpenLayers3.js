/*
 * File: app/view/OpenLayers3.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Ext5OpenLayers3.view.OpenLayers3', {
    extend: 'Ext.Component',
    alias: 'widget.openlayers3',

    requires: [
        'Ext5OpenLayers3.view.OpenLayers3ViewModel'
    ],

    config: {
        layers: [
            
        ],
        view: {
            
        }
    },

    viewModel: {
        type: 'openlayers3'
    },
    html: '<div id="map"></div>',
    defaultListenerScope: true,

    listeners: {
        afterrender: 'onMapAfterRender',
        resize: 'onMapResize'
    },

    onMapAfterRender: function(component, eOpts) {
        var me = this;

        //set default view
        Ext.applyIf(me.config.view, {
            projection: 'EPSG:3857',
            center: ol.proj.transform([-100, 40.00], 'EPSG:4326', 'EPSG:3857'),
            zoom: 5,
            minZoom: 0,
            maxZoom: 16
        });

        //set default base layer OSM
        Ext.applyIf(me.config.layers, [
            new ol.layer.Tile({
                source: new ol.source.OSM()
            })
        ]);

        //render map
        this.map = new ol.Map({
            target: 'map',
            renderer: 'canvas',
            layers: me.config.layers,
            view : new ol.View(me.config.view)
        });


        //Fire event
        me.fireEvent('mapRender', this.map);
    },

    onMapResize: function(component, width, height, oldWidth, oldHeight, eOpts) {
        if(this.map)
            this.map.setSize([width, height]);
    },

    getMap: function() {
        return this.map;
    }

});